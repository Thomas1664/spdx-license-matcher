diff --git a/spdx_license_matcher/difference.py b/spdx_license_matcher/difference.py
index 8e0db61..4d604c6 100644
--- a/spdx_license_matcher/difference.py
+++ b/spdx_license_matcher/difference.py
@@ -1,6 +1,9 @@
 import difflib
+from errno import ERANGE
 
 import jellyfish
+import sys
+import itertools
 
 
 def generate_diff(originalLicenseText, inputLicenseText):
@@ -18,8 +21,40 @@ def generate_diff(originalLicenseText, inputLicenseText):
         lines.append(line)
     return lines
 
+def _check_type(s):
+    if True and not isinstance(s, str):
+        raise TypeError('expected str or unicode, got %s' % type(s).__name__)
+    elif not True and not isinstance(s, unicode):
+        raise TypeError('expected unicode, got %s' % type(s).__name__)
 
-def get_similarity_percent(text1, text2):
+
+def x(s1, s2):
+    _check_type(s1)
+    _check_type(s2)
+
+    if s1 == s2:
+        return 0
+    rows = len(s1)+1
+    cols = len(s2)+1
+
+    if not s1:
+        return cols-1
+    if not s2:
+        return rows-1
+
+    prev = None
+    cur = range(cols)
+    for r in range(1, rows):
+        prev, cur = cur, [r] + [0]*(cols-1)
+        for c in range(1, cols):
+            deletion = prev[c] + 1
+            insertion = cur[c-1] + 1
+            edit = prev[c-1] + (0 if s1[r-1] == s2[c-1] else 1)
+            cur[c] = min(edit, deletion, insertion)
+
+    return cur[-1]
+
+def get_similarity_percent(text1: str, text2: str):
     """Levenshtein distance, a string metric for measuring the difference between two sequences, is used to calculate the similarity percentage between two license texts.
 
     Arguments:
@@ -29,7 +64,14 @@ def get_similarity_percent(text1, text2):
     Returns:
         float -- similarity percentage between the two given texts.
     """
-    levDis = float(jellyfish.levenshtein_distance(text1, text2))
+    t1 = type(text1)
+    t2 = type(text2)
+    s1 = text1
+    s2 = text2
+    res = x(s1, s2)
+    
+    #res: int = jellyfish.levenshtein_distance(str(text1), str(text2))
+    levDis = float(res)
     bigger = float(max(len(text1), len(text2)))
     similarityPercentage = round((bigger - levDis) / bigger * 100, 2)
     return similarityPercentage
diff --git a/spdx_license_matcher/matcher.py b/spdx_license_matcher/matcher.py
deleted file mode 100644
index 6ffd07f..0000000
--- a/spdx_license_matcher/matcher.py
+++ /dev/null
@@ -1,59 +0,0 @@
-import click
-import codecs
-import redis
-
-from spdx_license_matcher.build_licenses import build_spdx_licenses, is_keys_empty,get_url
-from spdx_license_matcher.computation import get_close_matches, get_matching_string
-from spdx_license_matcher.difference import generate_diff, get_similarity_percent
-from spdx_license_matcher.utils import colors, get_spdx_license_text
-
-from dotenv import load_dotenv
-import os
-
-load_dotenv()
-
-@click.command()
-@click.option('--text_file', '-f', required=True, help='The name of the file in which there is the text you want to match against the SPDX License database.')
-@click.option('--threshold', '-t', default=0.9, type = click.FloatRange(0.0, 1.0), help='Confidence threshold below which we just won"t consider it a match.', show_default=True)
-@click.option('--build/--no-build', default=False, help='Builds the SPDX license list in the database. If licenses are already present it will update the redis database.')
-def matcher(text_file, threshold, build):
-    """SPDX License matcher to match license text against the SPDX license list using an algorithm which finds close matches. """
-    try:
-
-        # For python 2
-        inputText = codecs.open(text_file, 'r', encoding='string_escape').read()
-        inputText = unicode(inputText, 'utf-8')
-    except:
-        # For python 3
-        inputText = codecs.open(text_file, 'r', encoding='unicode_escape').read()
-
-    if build or is_keys_empty():
-        click.echo('Building SPDX License List. This may take a while...')
-        build_spdx_licenses()
-
-    r = redis.StrictRedis(host=os.environ.get(key="SPDX_REDIS_HOST", default="localhost"), port=6379, db=0)
-    keys = list(r.keys())
-    values = r.mget(keys)
-    licenseData = dict(list(zip(keys, values)))
-    matches = get_close_matches(inputText, licenseData, threshold)
-    matchingString = get_matching_string(matches, inputText)
-    if matchingString == '':
-        licenseID = max(matches, key=matches.get)
-        spdxLicenseText = get_spdx_license_text(licenseID)
-        similarityPercent = get_similarity_percent(spdxLicenseText, inputText)
-        click.echo(colors('\nThe given license text matches {}% with that of {} based on Levenstein distance.'.format(similarityPercent, licenseID), 94))
-        differences = generate_diff(spdxLicenseText, inputText)
-        for line in differences:
-            if line[0] == '+':
-                line = colors(line, 92)
-            if line[0] == '-':
-                line = colors(line, 91)
-            if line[0] == '@':
-                line = colors(line, 90)
-            click.echo(line)
-    else:
-        click.echo(colors(matchingString, 92))
-
-
-if __name__ == "__main__":
-    matcher()
